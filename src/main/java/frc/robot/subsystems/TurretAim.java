// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import com.ctre.phoenix.motorcontrol.can.VictorSPX;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

import oi.limelightvision.limelight.frc.LimeLight;

/**
 *
 * 
 */
public class TurretAim extends SubsystemBase {

    private LimeLight limeLight1;
    private TalonSRX motorTurretTurn;
    private VictorSPX motorAgitator;
    private VictorSPX motorIndexer;

    /**
    *
    */
    public TurretAim() {

        limeLight1 = new LimeLight("limelight");

        motorTurretTurn = new WPI_TalonSRX(8);

        /* Factory default hardware to prevent unexpected behavior */
        motorTurretTurn.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
        motorTurretTurn.setInverted(false);
        motorTurretTurn.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
        motorTurretTurn.configNominalOutputForward(0, 30);
        motorTurretTurn.configNominalOutputReverse(0, 30);
        motorTurretTurn.configPeakOutputForward(1, 30);
        motorTurretTurn.configPeakOutputReverse(-1, 30);

        motorAgitator = new WPI_VictorSPX(7);

        motorIndexer = new WPI_VictorSPX(9);


    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
