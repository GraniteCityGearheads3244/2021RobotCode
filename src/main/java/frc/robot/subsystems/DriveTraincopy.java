// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpiutil.math.MathUtil;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import com.ctre.phoenix.sensors.PigeonIMU;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

/**
 *
 */
public class DriveTraincopy extends SubsystemBase {

    private WPI_TalonFX talonFX1;
    private WPI_TalonFX talonFX2;
    private WPI_TalonFX talonFX3;
    private SpeedControllerGroup leftMotorControllerGroup;
    private WPI_TalonFX talonFX4;
    private WPI_TalonFX talonFX5;
    private WPI_TalonFX talonFX6;
    private SpeedControllerGroup rightMotorControllerGroup;
    private DifferentialDrive differentialDrive1;

    private static final int kMaxNumberOfMotors = 2;
    private WPI_TalonFX[] m_talons = new WPI_TalonFX[kMaxNumberOfMotors];

    private PigeonIMU pigeonIMU1;
    private PigeonIMU _pidgey = new PigeonIMU(0);
    private double[] xyz_dps = new double[3];
    private double currentAngle = 0;
    private boolean angleIsGood = false;
    private double currentAngularRate = xyz_dps[2];

    private double m_desiredHeading = 0.0;

    /**
    *
    */
    public DriveTraincopy() {

        talonFX1 = new WPI_TalonFX(13);

        talonFX2 = new WPI_TalonFX(14);

        talonFX3 = new WPI_TalonFX(15);

        SpeedControllerGroup leftMotorControllerGroup = new SpeedControllerGroup(talonFX1, talonFX2, talonFX3);
        addChild("LeftMotorControllerGroup", leftMotorControllerGroup);

        talonFX4 = new WPI_TalonFX(0);

        talonFX5 = new WPI_TalonFX(1);

        talonFX6 = new WPI_TalonFX(2);

        SpeedControllerGroup rightMotorControllerGroup = new SpeedControllerGroup(talonFX4, talonFX5, talonFX6);
        addChild("RightMotorControllerGroup", rightMotorControllerGroup);

        differentialDrive1 = new DifferentialDrive(leftMotorControllerGroup, rightMotorControllerGroup);
        addChild("DifferentialDrive1", differentialDrive1);
        differentialDrive1.setSafetyEnabled(true);
        differentialDrive1.setExpiration(0.1);
        differentialDrive1.setMaxOutput(1.0);

  

        differentialDrive1.setDeadband(.1);
        differentialDrive1.setSafetyEnabled(false);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("Current Heading", getHeading());

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void my_DriveArcade(double xSpeed, double zRotation) {

        SmartDashboard.putNumber("xSpeed", xSpeed);
        SmartDashboard.putNumber("xRotation", zRotation);

        differentialDrive1.arcadeDrive(-xSpeed, zRotation);
    }

    private void getPidgey() {
        /* some temps for Pigeon API */
        PigeonIMU.GeneralStatus genStatus = new PigeonIMU.GeneralStatus();
        PigeonIMU.FusionStatus fusionStatus = new PigeonIMU.FusionStatus();

        /* grab some input data from Pigeon and gamepad */
        _pidgey.getGeneralStatus(genStatus);
        _pidgey.getRawGyro(xyz_dps);
        _pidgey.getFusedHeading(fusionStatus);
        currentAngle = fusionStatus.heading;
        angleIsGood = (_pidgey.getState() == PigeonIMU.PigeonState.Ready) ? true : false;
        currentAngularRate = xyz_dps[2];
    }

    public void setgyroOffset(double adjustment) {
        // Follow up headingGyro.setAngleAdjustment(adjustment);
        // headingGyro_BCK.setAngledAdjustimenet(adjustment); // Not available
        _pidgey.setFusedHeading(adjustment);
        // _pidgey.setYaw(adjustment);
    }

    public double getHeading() {
        getPidgey();
        double heading;
        if (angleIsGood) {
            heading = currentAngle;
        } else {
            heading = 0;// headingGyro_BCK.getAngle() + headingGyro.getAngleAdjustment();//Try to use
                        // the Back up Gyro with the angle Adjustment
        }

        return heading;
        // return headingGyro.getFusedHeading();
    }

    public void resetHeadingGyro() {
        _pidgey.setFusedHeading(0);
        m_desiredHeading = 0.0;
    }

    public void clearDesiredHeading() {
        m_desiredHeading = getHeading();
    }

    public void setdesiredHeading(double heading) {
        m_desiredHeading = heading;
    }

    public void recalibrateHeadingGyro() {
        resetHeadingGyro();
    }
}
