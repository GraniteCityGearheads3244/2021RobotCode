// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.Constants;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.StatorCurrentLimitConfiguration;
import com.ctre.phoenix.motorcontrol.SupplyCurrentLimitConfiguration;
import com.ctre.phoenix.motorcontrol.TalonFXControlMode;
import com.ctre.phoenix.motorcontrol.TalonFXFeedbackDevice;
import com.ctre.phoenix.motorcontrol.can.TalonFX;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.SpeedControllerGroup;

/**
 *
 */
public class FlyWheel_Vel_PID extends SubsystemBase {

    private TalonFX motorFlyWheel_Vel_PIDMaster;
    private TalonFX motorFlyWheel_Vel_PIDSlave;

    private static final int kTimeoutMs = 30;
    private static final int kPIDLoopIdx = 0;


    private double maxRPM = 6380;
    private double velocityUnitsper100ms = 2048.0 / 600.0;
    private double targetVelocity_UnitsPer100ms;

    // Ramp rates in Seconds
    private double m_closedLoopRamp_sec = 1;

    private boolean _currentLimEn = true;

    /* String for output */
    StringBuilder _sb = new StringBuilder();

    /* Loop tracker for prints */
    int _loops = 0;

    /**
    *
    */
    public FlyWheel_Vel_PID() {

        motorFlyWheel_Vel_PIDMaster = new TalonFX(Constants.kCAN_TurretMaster);
        motorFlyWheel_Vel_PIDSlave = new TalonFX(Constants.kCAN_TurretSlave);

        /* Factory Default all hardware to prevent unexpected behaviour */
        motorFlyWheel_Vel_PIDMaster.configFactoryDefault();
        motorFlyWheel_Vel_PIDSlave.configFactoryDefault();

        /*                                                               enabled | Limit(amp) | Trigger Threshold(amp) | Trigger Threshold Time(s)  */
		motorFlyWheel_Vel_PIDMaster.configStatorCurrentLimit(new StatorCurrentLimitConfiguration(true,      20,                25,                1.0));
        motorFlyWheel_Vel_PIDMaster.configSupplyCurrentLimit(new SupplyCurrentLimitConfiguration(true,      10,                15,                0.5));
        motorFlyWheel_Vel_PIDSlave.configStatorCurrentLimit(new StatorCurrentLimitConfiguration(true,      20,                25,                1.0));
        motorFlyWheel_Vel_PIDSlave.configSupplyCurrentLimit(new SupplyCurrentLimitConfiguration(true,      10,                15,                0.5));

		/* Netural Mode override  */
		motorFlyWheel_Vel_PIDMaster.setNeutralMode(NeutralMode.Coast); 
        motorFlyWheel_Vel_PIDSlave.setNeutralMode(NeutralMode.Coast);

        /* Invert if required */
        motorFlyWheel_Vel_PIDMaster.setInverted(false);
        motorFlyWheel_Vel_PIDSlave.setInverted(true);

        /* Set Slave to Follow Master */
        motorFlyWheel_Vel_PIDSlave.follow(motorFlyWheel_Vel_PIDMaster);

        /* Config neutral deadband to be the smallest possible */
        motorFlyWheel_Vel_PIDMaster.configNeutralDeadband(0.001);

        /* Config sensor used for Primary PID [Velocity] */
        motorFlyWheel_Vel_PIDMaster.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor, kPIDLoopIdx,
                kTimeoutMs);

        /* Config the peak and nominal outputs */
        motorFlyWheel_Vel_PIDMaster.configNominalOutputForward(0, kTimeoutMs);
        motorFlyWheel_Vel_PIDMaster.configNominalOutputReverse(0, kTimeoutMs);
        motorFlyWheel_Vel_PIDMaster.configPeakOutputForward(1, kTimeoutMs);
        motorFlyWheel_Vel_PIDMaster.configPeakOutputReverse(-1, kTimeoutMs);

        /* Config the Velocity closed loop gains in slot0 */
        motorFlyWheel_Vel_PIDMaster.config_kF(kPIDLoopIdx, 1023.0 / 20660.0, kTimeoutMs);
        motorFlyWheel_Vel_PIDMaster.config_kP(kPIDLoopIdx, 0.01, kTimeoutMs);
        motorFlyWheel_Vel_PIDMaster.config_kI(kPIDLoopIdx, 0, kTimeoutMs);
        motorFlyWheel_Vel_PIDMaster.config_kD(kPIDLoopIdx, 0, kTimeoutMs);
        /*
         * Talon FX does not need sensor phase set for its integrated sensor This is
         * because it will always be correct if the selected feedback device is
         * integrated sensor (default value) and the user calls getSelectedSensor* to
         * get the sensor's position/velocity.
         * 
         * https://phoenix-documentation.readthedocs.io/en/latest/ch14_MCSensor.html#
         * sensor-phase
         */

         // ensure ramp rate set accordingly
        motorFlyWheel_Vel_PIDMaster.configClosedloopRamp(m_closedLoopRamp_sec, kTimeoutMs);

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void my_FlyWheel_Vel_PIDPercentOutput(double speed) {
        motorFlyWheel_Vel_PIDMaster.set(ControlMode.PercentOutput, speed); // (speed);
    }

    public void my_FlyWheel_Vel_PIDVelocity(double rpm) {
        targetVelocity_UnitsPer100ms = rpm * velocityUnitsper100ms;
        motorFlyWheel_Vel_PIDMaster.set(TalonFXControlMode.Velocity, targetVelocity_UnitsPer100ms);
        SmartDashboard.putNumber("Fly Wheel Output", rpm);
        diagnostics();
    }

    private void diagnostics() {

        /* Print built string every 10 loops */
        if (++_loops >= 25) {

            /* Get Talon/Victor's current output percentage */
            double motorOutput = motorFlyWheel_Vel_PIDMaster.getMotorOutputPercent();

            /* Prepare line to print */
            _sb.append("\tout:");
            /* Cast to int to remove decimal places */
            _sb.append((int) (motorOutput * 100));
            _sb.append("%"); // Percent

            _sb.append("\tspd:");
            _sb.append(motorFlyWheel_Vel_PIDMaster.getSelectedSensorVelocity(kPIDLoopIdx));
            _sb.append("u"); // Native units
            /* Append more signals to print when in speed mode. */
            _sb.append("\terr:");
            _sb.append(motorFlyWheel_Vel_PIDMaster.getClosedLoopError(kPIDLoopIdx));
            _sb.append("\ttrg:");
            _sb.append(targetVelocity_UnitsPer100ms);

            _loops = 0;
            DriverStation.reportError(_sb.toString(), false);

        }
        /* Reset built string */
        _sb.setLength(0);
    }

    public boolean getatspeed(){
        if(motorFlyWheel_Vel_PIDMaster.getSelectedSensorVelocity(kPIDLoopIdx)>16000){
            //SmartDashboard.putNumber("PID Out", motorFlyWheel_Vel_PIDMaster.getSelectedSensorVelocity(kPIDLoopIdx));
            return true;
        }else{
            return false;
        }
        }
}
