// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import frc.robot.util.XboxControllerAxisButton;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;





import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a "declarative" paradigm, very little robot logic should
 * actually be handled in the {@link Robot} periodic methods (other than the
 * scheduler calls). Instead, the structure of the robot (including subsystems,
 * commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

  // The robot's subsystems
  private final TurretAim m_turretAim = new TurretAim();
  private final TurretShoot m_turretShoot = new TurretShoot();
  private final Intake m_intake = new Intake();
  private final DriveTrain m_driveTrain = new DriveTrain();

  // Joysticks
  private final XboxController coDriverControlls = new XboxController(1);
  private final XboxController driverControlls = new XboxController(0);

  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
   * The container for the robot. Contains subsystems, OI devices, and commands.
   */
  private RobotContainer() {

    // Smartdashboard Subsystems

    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    SmartDashboard.putData("IntakeIntake", new IntakeIntake(m_intake));
    SmartDashboard.putData("IntakeOutake", new IntakeOutake(m_intake));
    SmartDashboard.putData("IntakeExtend", new IntakeExtend(m_intake));
    SmartDashboard.putData("IntakeRetract", new IntakeRetract(m_intake));
    SmartDashboard.putData("TurretTurn", new TurretTurn(m_turretAim));
    // SmartDashboard.putData("Shoot", new Shoot( m_turretShoot ));

    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
    m_driveTrain.setDefaultCommand(new DriveWithJoystick(m_driveTrain, driverControlls));
    m_turretShoot.setDefaultCommand(new Shoot(m_turretShoot, driverControlls));

    // Configure autonomous sendable chooser

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings. Buttons can be
   * created by instantiating a {@link GenericHID} or one of its subclasses
   * ({@link edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then
   * passing it to a {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {

    final JoystickButton driverRightBumper = new JoystickButton(driverControlls,
        XboxController.Button.kBumperRight.value);
    driverRightBumper.whileHeld(new Shoot(m_turretShoot, driverControlls));

    final XboxControllerAxisButton driverLeftTrigger = new XboxControllerAxisButton(driverControlls,
        XboxController.Axis.kLeftTrigger);
    // driverLeftTrigger.whenPressed(new IntakeRetract(m_intake), true);

    // Create some buttons

    final JoystickButton xboxLeftBumper = new JoystickButton(driverControlls, XboxController.Button.kBumperLeft.value);
    xboxLeftBumper.whenPressed(new IntakeExtend(m_intake), true);
    SmartDashboard.putData("Xbox Left Bumper", new IntakeExtend(m_intake));

  }

  public XboxController getDriverControlls() {
    return driverControlls;
  }

  public XboxController getCoDriverControlls() {
    return coDriverControlls;
  }

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }

}
